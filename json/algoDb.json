{"algorithms":{"Bubble Sort":{"algoType":"sort","amtAlgoCode":"1","algoCodeMain":"function (array, sortingOrder = 'ascending'){\n    var swapped;\n    do{\n        swapped = false;\n        for (var i = 0; i < array.length-1; i++) {\n\t\t\tcmd_scan(i);\n\t\t\tcmd_scan(i+1);\n\t\t\tif(sortingOrder == 'ascending'){\n\t\t\t\tcmd_compare(i+1, \"<\", i);\n\t\t\t\tif (array[i] > array[i+1]) {\n\t\t\t\t\tcmd_swap(i, i+1);\n\t\t\t\t\tvar temp = array[i];\n\t\t\t\t\tarray[i] = array[i+1];\n\t\t\t\t\tarray[i+1] = temp;\n\t\t\t\t\tswapped = true;\n\t\t\t\t}\n\t\t\t}else if(sortingOrder == 'descending'){\n\t\t\t\tcmd_compare(i+1, \">\", i);\n\t\t\t\tif (array[i] < array[i+1]) {\n\t\t\t\t\tcmd_swap(i, i+1);\n\t\t\t\t\tvar temp = array[i];\n\t\t\t\t\tarray[i] = array[i+1];\n\t\t\t\t\tarray[i+1] = temp;\n\t\t\t\t\tswapped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcmd_is_sorted(array, sortingOrder);\n        }\n    }while (swapped);\n}","algoGuideBe":"ให้ผู้ดำเนินการและผู้แสดงออกมายืนหน้าชั้นเรียนตามลำดับที่ได้รับ","algoGuideAf":"ให้ผู้ดำเนินการทำการสแกนผู้แสดงที่มี QR Code","algoText":"begin BubbleSort(list)\n\tfor all elements of list\n\t\tif list[i] > list[i+1]\n\t\t\tswap(list[i], list[i+1])\n\t\tend if\n\tend for\n\treturn list\nend BubbleSort"},"Sequential Search":{"algoType":"search","amtAlgoCode":"1","algoCodeMain":"function (array, target) {\n\tfor (var i = 0; i < array.length; i++) {\n\t\tcmd_scan(i);\n\t  \tcmd_is_found(i, target);\n\t\tif (array[i] == target)\n\t\t\tcmd_is_found(i, target);\n\t}\n}","algoGuideBe":"ให้ผู้ดำเนินการและผู้แสดงออกมายืนหน้าชั้นเรียนตามลำดับที่ได้รับ","algoGuideAf":"ให้ผู้ดำเนินการทำการสแกนผู้แสดงที่มี QR Code จนกว่าจะพบเลขที่ต้องการ","algoText":"2 loop (looker < last AND target not equal list [looker])\n1 increment looker"},"Binary Search":{"algoType":"search","amtAlgoCode":"1","algoCodeMain":"function (array, target) {\n\tvar firstIndex = 0, lastIndex = array.length-1, middleIndex = Math.floor((lastIndex+firstIndex)/2);\n\twhile (array[middleIndex] != target && firstIndex < lastIndex) {\n\t\tcmd_highlight(firstIndex, \"blue\", \"First\");\n\t\tcmd_highlight(lastIndex, \"red\", \"Last\");\n\t\tcmd_highlight(middleIndex, \"green\", \"Middle\");\n\t\tcmd_scan(middleIndex);\n\t  \tcmd_is_found(middleIndex, target);\n\t\tcmd_highlight(middleIndex);\n\t\tcmd_highlight(firstIndex);\n\t\tcmd_highlight(lastIndex);\n\t\tif (target > array[middleIndex]){\n\t\t\tfirstIndex = middleIndex+1;\n\t\t}else if (target < array[middleIndex]){\n\t\t\tlastIndex = middleIndex-1;\n\t\t}\n\t\tmiddleIndex = Math.floor((lastIndex+firstIndex)/2);\n\t}\n\tif(firstIndex < lastIndex && firstIndex != middleIndex && lastIndex != middleIndex){\n\t\tcmd_highlight(firstIndex, \"blue\", \"First\");\n\t\tcmd_highlight(lastIndex, \"red\", \"Last\");\n\t\tcmd_highlight(middleIndex, \"green\", \"Middle\");\n\t}else if(firstIndex < lastIndex && firstIndex == middleIndex && lastIndex != middleIndex){\n\t\tcmd_highlight(lastIndex, \"red\", \"Last\");\n\t\tcmd_highlight(middleIndex, \"green\", \"Middle\");\n\t}else if(firstIndex < lastIndex && firstIndex != middleIndex && lastIndex == middleIndex){\n\t\tcmd_highlight(firstIndex, \"blue\", \"First\");\n\t\tcmd_highlight(middleIndex, \"green\", \"Middle\");\n\t}else\n\t\tcmd_highlight(middleIndex, \"green\", \"Last scan.\");\n\tcmd_scan(middleIndex);\n  \tcmd_is_found(middleIndex, target);\n\tcmd_highlight(middleIndex);\n\tcmd_highlight(firstIndex);\n\tcmd_highlight(lastIndex);\n\tif (array[middleIndex] == target)\n\t\tcmd_is_found(middleIndex, target);\n}","algoGuideBe":"คำแนะนำก่อนเล่น","algoGuideAf":"คำแนะนำขณะเล่น","algoText":"อัลกอริทึม"},"Selection Sort":{"algoType":"sort","amtAlgoCode":"1","algoCodeMain":"function (array, sortingOrder = 'ascending') {\n\tvar len = array.length, min;\n\tfor (i = 0; i < len; i++) {\n\t\tmin = i;\n\t\tcmd_scan(min);\n\t\tcmd_highlight(min, \"green\", \"Min\");\n\t\tfor (j = i + 1; j < len; j++) {\n\t\t\tcmd_scan(j);\n\t\t\tif (sortingOrder == 'ascending') {\n\t\t\t\tcmd_compare(j, \"<\", min);\n\t\t\t\tif (array[j] < array[min]) {\n\t\t\t\t\tcmd_highlight(min);\n\t\t\t\t\tcmd_highlight(j, \"green\", \"Min\");\n\t\t\t\t\tmin = j;\n\t\t\t\t}\n\t\t\t} else if (sortingOrder == 'descending') {\n\t\t\t\tcmd_compare(j, \">\", min);\n\t\t\t\tif (array[j] > array[min]) {\n\t\t\t\t\tcmd_highlight(min);\n\t\t\t\t\tcmd_highlight(j, \"green\", \"Max\");\n\t\t\t\t\tmin = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (i != min) {\n\t\t\tcmd_swap(min, i);\n\t\t\tcmd_highlight(i);\n\t\t\tvar temp = array[i];\n\t\t\tarray[i] = array[min];\n\t\t\tarray[min] = temp;\n\t\t}\n\t\tcmd_is_sorted(array, sortingOrder);\n\t}\n}","algoGuideBe":"คำแนะนำก่อนเล่น","algoGuideAf":"คำแนะนำขณะเล่น","algoText":"อัลกอริทึม"},"Insertion Sort":{"algoType":"sort","amtAlgoCode":"1","algoCodeMain":"function (array, sortingOrder = 'ascending') {\n\tvar compared = false;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tvar temp = array[i];\n\t\tvar j = i - 1;\n\t\tcmd_scan(i);\n\t\tif (j != -1) {\n\t\t\tif (sortingOrder == 'ascending')\n\t\t\t\tcmd_compare(j + 1, \"<\", j);\n\t\t\telse if (sortingOrder == 'descending')\n\t\t\t\tcmd_compare(j + 1, \">\", j);\n\t\t}\n\t\tcompared = true;\n\t\twhile (j >= 0 && array[j] > temp && sortingOrder == 'ascending') {\n\t\t\tif (!compared)\n\t\t\t\tcmd_compare(j + 1, \"<\", j);\n\t\t\tcmd_swap(j, j + 1);\n\t\t\tarray[j + 1] = array[j];\n\t\t\tj--;\n\t\t\tcompared = false;\n\t\t}\n\t\twhile (j >= 0 && array[j] < temp && sortingOrder == 'descending') {\n\t\t\tif (!compared)\n\t\t\t\tcmd_compare(j + 1, \">\", j);\n\t\t\tcmd_swap(j, j + 1);\n\t\t\tarray[j + 1] = array[j];\n\t\t\tj--;\n\t\t\tcompared = false;\n\t\t}\n\t\tarray[j + 1] = temp;\n\t}\n\tcmd_is_sorted(array, sortingOrder);\n}","algoGuideBe":"คำแนะนำก่อนเล่น","algoGuideAf":"คำแนะนำขณะเล่น","algoText":"อัลกอริทึม"},"Quick Sort":{"algoType":"sort","amtAlgoCode":"1","algoCodeMain":"function (array, sortingOrder = 'ascending', left, right) {\n\tleft = typeof left != \"number\" ? 0 : left;\n\tright = typeof right != \"number\" ? array.length - 1 : right;\n\tvar i = left,\n\tj = right;\n\tpivotidx = (left + right) / 2;\n\tvar pivot = parseInt(array[Math.round(pivotidx)]);\n\tcmd_scan(Math.round(pivotidx));\n\tcmd_highlight(Math.round(pivotidx), \"red\", \"Pivot\");\n\twhile (i <= j) {\n\t\tif (sortingOrder == 'ascending') {\n\t\t\tif (i != Math.round(pivotidx)) {\n\t\t\t\tcmd_scan(i);\n\t\t\t\tcmd_compare(i, \"<\", Math.round(pivotidx));\n\t\t\t}\n\t\t\twhile (parseInt(array[i]) < pivot) {\n\t\t\t\tif (i + 1 != Math.round(pivotidx)) {\n\t\t\t\t\tcmd_scan(i + 1);\n\t\t\t\t\tcmd_compare(i + 1, \"<\", Math.round(pivotidx));\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (j != Math.round(pivotidx)) {\n\t\t\t\tcmd_scan(j);\n\t\t\t\tcmd_compare(j, \"<\", i);\n\t\t\t}\n\t\t\twhile (parseInt(array[j]) > pivot) {\n\t\t\t\tif (j - 1 != Math.round(pivotidx)) {\n\t\t\t\t\tcmd_scan(j - 1);\n\t\t\t\t\tcmd_compare(j - 1, \"<\", i);\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) {\n\t\t\t\tfor(var unhighlight = 0; unhighlight < array.length; unhighlight++)\n\t\t\t\t\tcmd_highlight(unhighlight);\n\t\t\t\tif (i != j)\n\t\t\t\t\tcmd_swap(i, j);\n\t\t\t\tvar tmp = array[i];\n\t\t\t\tarray[i] = array[j];\n\t\t\t\tarray[j] = tmp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t\tcmd_highlight(Math.round(pivotidx), \"red\", \"Pivot\");\n\t\t\t}\n\t\t} else if (sortingOrder == 'descending') {\n\t\t\tif (i != Math.round(pivotidx)) {\n\t\t\t\tcmd_scan(i);\n\t\t\t\tcmd_compare(i, \">\", Math.round(pivotidx));\n\t\t\t}\n\t\t\twhile (parseInt(array[i]) > pivot) {\n\t\t\t\tif (i + 1 != Math.round(pivotidx)) {\n\t\t\t\t\tcmd_scan(i + 1);\n\t\t\t\t\tcmd_compare(i + 1, \">\", Math.round(pivotidx));\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (j != Math.round(pivotidx)) {\n\t\t\t\tcmd_scan(j);\n\t\t\t\tcmd_compare(j, \">\", i);\n\t\t\t}\n\t\t\twhile (parseInt(array[j]) < pivot) {\n\t\t\t\tif (j - 1 != Math.round(pivotidx)) {\n\t\t\t\t\tcmd_scan(j - 1);\n\t\t\t\t\tcmd_compare(j - 1, \">\", i);\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i <= j) {\n\t\t\t\tfor(var unhighlight = 0; unhighlight < array.length; unhighlight++)\n\t\t\t\t\tcmd_highlight(unhighlight);\n\t\t\t\tif (i != j)\n\t\t\t\t\tcmd_swap(i, j);\n\t\t\t\tvar tmp = array[j];\n\t\t\t\tarray[j] = array[i];\n\t\t\t\tarray[i] = tmp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t\tcmd_highlight(Math.round(pivotidx), \"red\", \"Pivot\");\n\t\t\t}\n\t\t}\n\t}\n\tfor(var unhighlight = 0; unhighlight < array.length; unhighlight++)\n\t\tcmd_highlight(unhighlight);\n\tif (left < j)\n\t\tthisFn(array, sortingOrder, left, j);\n\tif (i < right)\n\t\tthisFn(array, sortingOrder, i, right);\n\tcmd_is_sorted(array, sortingOrder);\n\treturn array;\n}","algoGuideBe":"คำแนะนำก่อนเล่น","algoGuideAf":"คำแนะนำขณะเล่น","algoText":"อัลกอริทึม"},"Shell Sort":{"algoType":"sort","amtAlgoCode":"1","algoCodeMain":"function (array, sortingOrder = 'ascending') {\n\tvar len = array.length;\n\tvar gapSize = Math.floor(len / 2);\n\tvar jTemp,\n\tjgTemp;\n\tvar saved = false;\n\twhile (gapSize > 0) {\n\t\tfor (var i = gapSize; i < len; i += gapSize)\n\t\t\tcmd_highlight(i, \"green\", \"Highlight\");\n\t\tfor (var i = gapSize; i < len; i++) {\n\t\t\tvar temp = array[i];\n\t\t\tvar j = i;\n\t\t\tif (sortingOrder == 'ascending') {\n\t\t\t\tif (j >= gapSize) {\n\t\t\t\t\tcmd_scan(j);\n\t\t\t\t\tcmd_scan(j - gapSize);\n\t\t\t\t\tcmd_compare(j - gapSize, \">\", j);\n\t\t\t\t}\n\t\t\t\twhile (j >= gapSize && array[j - gapSize] > temp) {\n\t\t\t\t\tif (!saved) {\n\t\t\t\t\t\tjTemp = j;\n\t\t\t\t\t\tjgTemp = j - gapSize;\n\t\t\t\t\t}\n\t\t\t\t\tarray[j] = array[j - gapSize];\n\t\t\t\t\tj -= gapSize;\n\t\t\t\t\tsaved = true;\n\t\t\t\t}\n\t\t\t\tsaved = false;\n\t\t\t\tif (temp < array[j])\n\t\t\t\t\tcmd_swap(jTemp, jgTemp);\n\t\t\t} else if (sortingOrder == 'descending') {\n\t\t\t\tif (j <= gapSize) {\n\t\t\t\t\tcmd_scan(j);\n\t\t\t\t\tcmd_scan(j - gapSize);\n\t\t\t\t\tcmd_compare(j - gapSize, \"<\", j);\n\t\t\t\t}\n\t\t\t\twhile (j >= gapSize && array[j - gapSize] < temp) {\n\t\t\t\t\tif (!saved) {\n\t\t\t\t\t\tjTemp = j;\n\t\t\t\t\t\tjgTemp = j - gapSize;\n\t\t\t\t\t}\n\t\t\t\t\tarray[j] = array[j - gapSize];\n\t\t\t\t\tj -= gapSize;\n\t\t\t\t\tsaved = true;\n\t\t\t\t}\n\t\t\t\tsaved = false;\n\t\t\t\tif (temp > array[j])\n\t\t\t\t\tcmd_swap(jTemp, jgTemp);\n\t\t\t}\n\t\t\tarray[j] = temp;\n\t\t\tcmd_is_sorted(array, sortingOrder);\n\t\t}\n\t\tfor (var i = gapSize; i < len; i += gapSize)\n\t\t\tcmd_highlight(i);\n\t\tgapSize = Math.floor(gapSize / 2);\n\t}\n\treturn array;\n}","algoGuideBe":"คำแนะนำก่อนเล่น","algoGuideAf":"คำแนะนำขณะเล่น","algoText":"อัลกอริทึม"},"Heap Sort":{"algoType":"sort","amtAlgoCode":"3","algoCodeMain":"function (array, sortingOrder = 'ascending') {\n\tfn1(array, sortingOrder, array.length);\n\tfor (var i = array.length - 1; i > 0; i--) {\n\t\tcmd_swap(0, i);\n\t\tvar tmp = array[i];\n\t\tarray[i] = array[0];\n\t\tarray[0] = tmp;\n\t\tfor (var hl = 0; hl < array.length; hl++) {\n\t\t\tif (hl == 0) {\n\t\t\t\tcmd_highlight(hl, \"blue\", \"\");\n\t\t\t} else if (hl > 0 && hl <= 2) {\n\t\t\t\tcmd_highlight(hl, \"green\", \"\");\n\t\t\t} else if (hl > 2 && hl <= 6) {\n\t\t\t\tcmd_highlight(hl, \"yellow\", \"\");\n\t\t\t} else if (hl > 6 && hl <= 14) {\n\t\t\t\tcmd_highlight(hl, \"pink\", \"\");\n\t\t\t} else if (hl > 14 && hl <= 30) {\n\t\t\t\tcmd_highlight(hl, \"red\", \"\");\n\t\t\t} else {\n\t\t\t\tcmd_highlight(hl, \"gray\", \"\");\n\t\t\t}\n\t\t}\n\t\tfn2(array, sortingOrder, 0, i);\n\t}\n    return array;\n}","algoCodeFn1":"function (array, sortingOrder, length) {\n\tfor (var hl = 0; hl < array.length; hl++) {\n\t\tif (hl == 0) {\n\t\t\tcmd_highlight(hl, \"blue\", \"\");\n\t\t} else if (hl > 0 && hl <= 2) {\n\t\t\tcmd_highlight(hl, \"green\", \"\");\n\t\t} else if (hl > 2 && hl <= 6) {\n\t\t\tcmd_highlight(hl, \"yellow\", \"\");\n\t\t} else if (hl > 6 && hl <= 14) {\n\t\t\tcmd_highlight(hl, \"pink\", \"\");\n\t\t} else if (hl > 14 && hl <= 30) {\n\t\t\tcmd_highlight(hl, \"red\", \"\");\n\t\t} else {\n\t\t\tcmd_highlight(hl, \"gray\", \"\");\n\t\t}\n\t}\n\tfor (var i = Math.floor(length / 2); i >= 0; i--) {\n\t\tfn2(array, sortingOrder, i, length);\n\t}\n}","algoCodeFn2":"function (array, sortingOrder = 'ascending', i, length) {\n\twhile (true) {\n\t\tvar left = i * 2 + 1;\n\t\tvar right = i * 2 + 2;\n\t\tvar largest = i;\n\t\tvar foundLargest = false;\n\t\tif(sortingOrder == 'ascending'){\n\t\t\tif (right < length) {\n\t\t\t\tcmd_scan(right);\n\t\t\t\tcmd_scan(largest);\n\t\t\t\tcmd_compare(largest, \"<\", right);\n\t\t\t\tif (array[right] > array[largest] && array[right] > array[left]) {\n\t\t\t\t\tcmd_swap(largest, right);\n\t\t\t\t\tfoundLargest = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (left < length) {\n\t\t\t\tcmd_scan(left);\n\t\t\t\tcmd_scan(largest);\n\t\t\t\tcmd_compare(largest, \"<\", left);\n\t\t\t\tif (array[left] > array[largest] && !foundLargest)\n\t\t\t\t\tcmd_swap(largest, left);\n\t\t\t}\n\t\t\tif (left < length && array[left] > array[largest]) {\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < length && array[right] > array[largest]) {\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tcmd_is_sorted(array, sortingOrder);\n\t\t\tif (i == largest) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar tmp = array[i];\n\t\t\tarray[i] = array[largest];\n\t\t\tarray[largest] = tmp;\n\t\t\tfor (var hl = 0; hl < array.length; hl++) {\n\t\t\t\tif (hl == 0) {\n\t\t\t\t\tcmd_highlight(hl, \"blue\", \"\");\n\t\t\t\t} else if (hl > 0 && hl <= 2) {\n\t\t\t\t\tcmd_highlight(hl, \"green\", \"\");\n\t\t\t\t} else if (hl > 2 && hl <= 6) {\n\t\t\t\t\tcmd_highlight(hl, \"yellow\", \"\");\n\t\t\t\t} else if (hl > 6 && hl <= 14) {\n\t\t\t\t\tcmd_highlight(hl, \"pink\", \"\");\n\t\t\t\t} else if (hl > 14 && hl <= 30) {\n\t\t\t\t\tcmd_highlight(hl, \"red\", \"\");\n\t\t\t\t} else {\n\t\t\t\t\tcmd_highlight(hl, \"gray\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = largest;\n\t\t}else if(sortingOrder == 'descending'){\n\t\t\tif (right < length) {\n\t\t\t\tcmd_scan(right);\n\t\t\t\tcmd_scan(largest);\n\t\t\t\tcmd_compare(largest, \">\", right);\n\t\t\t\tif (array[right] < array[largest] && array[right] < array[left]) {\n\t\t\t\t\tcmd_swap(largest, right);\n\t\t\t\t\tfoundLargest = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (left < length) {\n\t\t\t\tcmd_scan(left);\n\t\t\t\tcmd_scan(largest);\n\t\t\t\tcmd_compare(largest, \">\", left);\n\t\t\t\tif (array[left] < array[largest] && !foundLargest)\n\t\t\t\t\tcmd_swap(largest, left);\n\t\t\t}\n\t\t\tif (left < length && array[left] < array[largest]) {\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < length && array[right] < array[largest]) {\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tcmd_is_sorted(array, sortingOrder);\n\t\t\tif (i == largest) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar tmp = array[largest];\n\t\t\tarray[largest] = array[i];\n\t\t\tarray[i] = tmp;\n\t\t\tfor (var hl = 0; hl < array.length; hl++) {\n\t\t\t\tif (hl == 0) {\n\t\t\t\t\tcmd_highlight(hl, \"blue\", \"\");\n\t\t\t\t} else if (hl > 0 && hl <= 2) {\n\t\t\t\t\tcmd_highlight(hl, \"green\", \"\");\n\t\t\t\t} else if (hl > 2 && hl <= 6) {\n\t\t\t\t\tcmd_highlight(hl, \"yellow\", \"\");\n\t\t\t\t} else if (hl > 6 && hl <= 14) {\n\t\t\t\t\tcmd_highlight(hl, \"pink\", \"\");\n\t\t\t\t} else if (hl > 14 && hl <= 30) {\n\t\t\t\t\tcmd_highlight(hl, \"red\", \"\");\n\t\t\t\t} else {\n\t\t\t\t\tcmd_highlight(hl, \"gray\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = largest;\n\t\t}\n\t}\n}","algoGuideBe":"คำแนะนำก่อนเล่น","algoGuideAf":"คำแนะนำขณะเล่น","algoText":"อัลกอริทึม"},"test":{"algoType":"search","amtAlgoCode":"1","algoCodeMain":"function (array, target) {\n\tcmd_scan(0);\n\t  cmd_scan(1);\n}","algoGuideBe":"test","algoGuideAf":"test","algoText":"test"}}}